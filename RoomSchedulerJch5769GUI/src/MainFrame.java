
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Johnh
 */
public class MainFrame extends javax.swing.JDialog {

    /**
     * Creates new form MainFrame
     */
    public MainFrame(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rebuildRoomsTextArea();
        rebuildAddDateComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        DisplayWaitlist = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyNameText = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addRoomSeats = new javax.swing.JTextField();
        addRoomButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        addRoomName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        removeRoomButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listOfRoomsTextArea = new javax.swing.JTextArea();
        AddDateYearSpinner = new javax.swing.JSpinner();
        addDateMonthComboBox = new javax.swing.JComboBox();
        addDateDayComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        reserveFacultyComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox();
        reserveSeatsTestField = new javax.swing.JTextField();
        reserveRequestButton = new javax.swing.JButton();
        CancelReservation = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        displayFacultyComboBox = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        DisplayFacultyTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        displayReservationsCombobox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReservationsLabel = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        waitlistTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        facultyStatusLabel = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        jLabel6.setText("jLabel6");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));

        DisplayWaitlist.setName(""); // NOI18N
        DisplayWaitlist.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DisplayWaitlistStateChanged(evt);
            }
        });

        jLabel2.setText("Faculty Name:");

        addFacultyNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyNameTextActionPerformed(evt);
            }
        });

        addFacultyButton.setText("Add Faclty");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addRoomSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomSeatsActionPerformed(evt);
            }
        });

        addRoomButton.setBackground(new java.awt.Color(153, 255, 153));
        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Room Name:");

        addRoomName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomNameActionPerformed(evt);
            }
        });

        jLabel9.setText("Seat Count:");

        jLabel10.setText("Date: (YYYY-MM-dd)");

        jButton1.setText("Add Date");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        removeRoomButton.setBackground(new java.awt.Color(255, 153, 153));
        removeRoomButton.setText("Remove Room");
        removeRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoomButtonActionPerformed(evt);
            }
        });

        listOfRoomsTextArea.setColumns(20);
        listOfRoomsTextArea.setRows(5);
        jScrollPane4.setViewportView(listOfRoomsTextArea);

        AddDateYearSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2019), Integer.valueOf(1), null, Integer.valueOf(1)));

        addDateMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addDateDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AddDateYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addDateMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addDateDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addFacultyNameText))
                        .addComponent(addFacultyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(addFacultyNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(addRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(addFacultyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(addRoomSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddDateYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDateMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDateDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DisplayWaitlist.addTab("Add Faculty/Date/Room", jPanel1);

        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Faclty:");

        jLabel4.setText("Date: (YYYY-MM-dd)");

        jLabel5.setText("Seats:");

        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        reserveRequestButton.setBackground(new java.awt.Color(153, 255, 153));
        reserveRequestButton.setText("Create Reservation");
        reserveRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveRequestButtonActionPerformed(evt);
            }
        });

        CancelReservation.setBackground(new java.awt.Color(255, 153, 153));
        CancelReservation.setText("Cancel Reservation");
        CancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelReservationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reserveSeatsTestField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reserveRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                        .addComponent(CancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(reserveSeatsTestField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        DisplayWaitlist.addTab("Create/Cancel Reservation", jPanel2);

        jLabel11.setText("Faculty:");

        displayFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        displayFacultyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayFacultyComboBoxActionPerformed(evt);
            }
        });

        DisplayFacultyTextArea.setColumns(20);
        DisplayFacultyTextArea.setRows(5);
        jScrollPane3.setViewportView(DisplayFacultyTextArea);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(displayFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(displayFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        DisplayWaitlist.addTab("Display Faculty", jPanel7);

        jLabel7.setText("Date: (YYYY-MM-dd)");

        displayReservationsCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        displayReservationsCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                displayReservationsComboboxItemStateChanged(evt);
            }
        });
        displayReservationsCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayReservationsComboboxActionPerformed(evt);
            }
        });

        ReservationsLabel.setColumns(20);
        ReservationsLabel.setRows(5);
        jScrollPane1.setViewportView(ReservationsLabel);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(33, 33, 33)
                        .addComponent(displayReservationsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayReservationsCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );

        DisplayWaitlist.addTab("Display Reservations", jPanel3);

        waitlistTextArea.setColumns(20);
        waitlistTextArea.setRows(5);
        jScrollPane2.setViewportView(waitlistTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );

        DisplayWaitlist.addTab("Display Waitlist", jPanel4);

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 255));
        jLabel1.setText("Room Scheduler");
        jLabel1.setToolTipText("");

        facultyStatusLabel.setText("STATUS: ERROR ID 10 T problem");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DisplayWaitlist)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(facultyStatusLabel)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisplayWaitlist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(facultyStatusLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DisplayWaitlistStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DisplayWaitlistStateChanged
        // TODO add your handling code here:

        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
        rebuildDatesComboBoxes();
        rebuildReseravtionsDatesComboBoxes();
        displayReseravtions();
        displayWaitlist();
        displayFacultyReservaitons();
        rebuildRoomsTextArea();
    }//GEN-LAST:event_DisplayWaitlistStateChanged
    private void rebuildAddDateComboBoxes() { 
        ArrayList months = new ArrayList(12);
         for(int index=1; index <= 12; index++){
             months.add(index);
         }
         addDateMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(months.toArray()));
         
         ArrayList days = new ArrayList(31);
         for(int index=1; index <= 31; index++){
             months.add(index);
         }
        addDateDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(months.toArray()));
    }
    private void displayReservationsComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_displayReservationsComboboxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_displayReservationsComboboxItemStateChanged

    private void CancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelReservationActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        String faculty = String.valueOf(reserveFacultyComboBox.getSelectedItem());
        Date date = Date.valueOf(String.valueOf(reserveDateComboBox.getSelectedItem()));

        // get the Room name from the reservaiton.
       String room = ReservationQueries.getRoomByFacultyandDate(faculty, date);
       
       int seats = RoomQueries.getseatsWithRoomNameAs(room);
       
        // Remove entries from reservations and waitlist
        ReservationQueries.cancelReservation(faculty, date);
        WaitlistQueries.RemoveWaitlistEntry(faculty, date);
        facultyStatusLabel.setText("Reservaiton for " + faculty + " on " + date + " has been removed.");
       
        // Set someone else for the same date.
         checkWaitlistForDate(date, room, seats);
    }//GEN-LAST:event_CancelReservationActionPerformed

    private void reserveRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveRequestButtonActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        
        // The faculty memberwill be assigned aroomfor the requested Date, if there are seatsavailable.
        // The rooms will be assigned in a best fit manner. Thefaculty membershould be assigned the smallest room that has enough seats for their request.
        // If there are no rooms available or no rooms with enough seats available, the faculty memberwill be put on thewait list for that Date.
        // The waiting list must be maintained in the order the faculty members tried to reserve their rooms.
        String faculty = String.valueOf(reserveFacultyComboBox.getSelectedItem());
        Date date = Date.valueOf(String.valueOf(reserveDateComboBox.getSelectedItem()));
        int seats = parseInt(reserveSeatsTestField.getText());
        
        addReservationOrWaitlistForfaculty(faculty, date, seats);
    }
    private void addReservationOrWaitlistForfaculty(String faculty, Date date,  int seats) {
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());

        // check room size, for avaible room.
        //ArrayList<String>  allRooms = RoomQueries.getAllRooms();
        ArrayList<String> allRooms = RoomQueries.getRoomsBiggerThan(seats);
        ArrayList<String> takenRooms = ReservationQueries.getRoomsReservedByDate(date);

        // Specal case for when there is no room big enough, causing the list to be empty.
        if (allRooms.isEmpty() == true) {
            // add the Faculty member to the waitlist.
                WaitlistQueries.addWaitlistEntry(faculty, date, seats, timestamp);
                facultyStatusLabel.setText(facultyStatusLabel.getText() + "   |    " +  faculty + " has been added to the waitlist");
        }
        
        
        String room = "";

        // Check avalibility.
        for(int i=0;i<allRooms.size();i++){

            // Set the curren room.
            room = allRooms.get(i);

            // Check if the room is taken
            if (takenRooms.contains(allRooms.get(i)) == false) {
                // Save reservation
                ReservationQueries.addReservationEntry(faculty, room, date, seats, timestamp);
                facultyStatusLabel.setText(facultyStatusLabel.getText() + "   |    " +  faculty+"  has reserved, room " + room + " with " + seats + " seats.");
                break;
            }
            // If the all rooms are taken, the faculty is added to the waitlist.
            else if (i == allRooms.size() - 1) {
            
                // add the Faculty member to the waitlist.
                WaitlistQueries.addWaitlistEntry(faculty, date, seats, timestamp);
                facultyStatusLabel.setText(facultyStatusLabel.getText() + "    |    " +  faculty + " has been added to the waitlist");
            }
        }
    }//GEN-LAST:event_reserveRequestButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        // Retreving the Year: 
        String year = String.valueOf(AddDateYearSpinner.getValue());
        // Retreving the Month:
        String month = String.valueOf(addDateMonthComboBox.getSelectedItem());
        // Retreaving the day:
        String day = String.valueOf(addDateDayComboBox.getSelectedItem());

        //Parsing the String in order <YYYY-MM-dd>
        Date date2 = Date.valueOf(year + "-" + month + "-" + day);

        // Add the date to the table.
        DatesQueries.addDate(date2);
        facultyStatusLabel.setText("The date: " + date2 + " has been added to the date table.");

        // Rebuild dates comboboxes.
        rebuildDatesComboBoxes();
        rebuildReseravtionsDatesComboBoxes();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void addRoomNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addRoomNameActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        // Add the Room to the Room table.

        // Create a new room object.
        RoomEntry  newRoom = new RoomEntry();
        newRoom.setRoomName(addRoomName.getText());
        newRoom.setSeats(Integer.parseInt(addRoomSeats.getText()));

        //add room to Table
        RoomQueries.addRoom(newRoom.getRoomName(), newRoom.getSeats());

        // Display to the user
        facultyStatusLabel.setText("Room: "  + newRoom.getRoomName() + " has been created with " +  newRoom.getSeats() + " Seats");

        
        
        // Add reservations for new room.
        ArrayList<Date> dates = DatesQueries.getDatesList();
        for(int dateIndex=0; dateIndex < dates.size(); dateIndex++){
            checkWaitlistForDate(dates.get(dateIndex), addRoomName.getText(), newRoom.getSeats());
            
        }
        
        rebuildRoomsTextArea();
    }//GEN-LAST:event_addRoomButtonActionPerformed
    // This checks the waitlist for anyone requesting a room on a date, 
    private void checkWaitlistForDate(Date date, String roomName,  int seats){
        
        //System.out.println("Date: " + date);
        ArrayList<ArrayList<String>> waitlist = WaitlistQueries.getWaitlist();

        // Index trugh the whole waitlist.
        for(int waitlistIndex=0; waitlistIndex < waitlist.get(0).size(); waitlistIndex++){

            //System.out.println("Date: " + date);
            //System.out.println("Room Big Enough: " + String.valueOf(seats > Integer.parseInt(waitlist.get(2).get(waitlistIndex))));
            //System.out.println("   Date2 : " + (waitlist.get(1).get(waitlistIndex)));
            if (seats >= Integer.parseInt(waitlist.get(2).get(waitlistIndex)) && String.valueOf(date).equals(waitlist.get(1).get(waitlistIndex))){

                // Add the reservation.
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                ReservationQueries.addReservationEntry(waitlist.get(0).get(waitlistIndex), roomName, Date.valueOf(waitlist.get(1).get(waitlistIndex)), seats, timestamp);
                facultyStatusLabel.setText( facultyStatusLabel.getText() + "   &   " +waitlist.get(0).get(waitlistIndex) + "  has reserved, room " + roomName + " with " + seats + " seats.");

                // Remove the entry from the waitlist.
                WaitlistQueries.RemoveWaitlistEntry(waitlist.get(0).get(waitlistIndex), date);
                // Recalulate the waitlist
                displayWaitlist();
                break;
            }
        }
    }
    private void addRoomSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addRoomSeatsActionPerformed

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        // Add the faculty to the faculty table.
        String name = addFacultyNameText.getText();
        FacultyQueries.addFaculty(name);
        facultyStatusLabel.setText(name+" has been added to the Faculty.");

        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void addFacultyNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addFacultyNameTextActionPerformed

    private void displayFacultyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayFacultyComboBoxActionPerformed
        // TODO add your handling code here:
        
        displayFacultyReservaitons();
    }//GEN-LAST:event_displayFacultyComboBoxActionPerformed
    private void clearStatus() {
        facultyStatusLabel.setText("");
    }
    private void removeRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoomButtonActionPerformed
        // TODO add your handling code here:
        
        // Clear the status:
        clearStatus();
        
        // Removes the room from the rooms table.
        String roomName = addRoomName.getText();
        RoomQueries.dropRoom(roomName);
        
        // Updates the status
         facultyStatusLabel.setText("Room: " + roomName + " hass been removed.");
         
         // Removed the reservations for that room, then adding them to the waitlist.
         ArrayList<ArrayList<String>> reservations = ReservationQueries.getReservationsByRoom(roomName);
         
         // For every reservation, they need ither a new room or to be added to the waitlist.
        for(int reservationIndex=0; reservationIndex < reservations.get(0).size(); reservationIndex++){
            
            // Take the information out of the reservation.
            String faculty = reservations.get(0).get(reservationIndex);
            Date date = Date.valueOf(reservations.get(1).get(reservationIndex));
            String seats = reservations.get(2).get(reservationIndex);
            
            // Remove the reservation.
            ReservationQueries.cancelReservation(faculty, date);
            
            // Create a new reservation.
            addReservationOrWaitlistForfaculty(faculty, date, Integer.parseInt(seats));
        }
         
         rebuildRoomsTextArea();
    }//GEN-LAST:event_removeRoomButtonActionPerformed

    private void displayReservationsComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayReservationsComboboxActionPerformed
        // TODO add your handling code here:
        displayReseravtions();
    }//GEN-LAST:event_displayReservationsComboboxActionPerformed
 private void rebuildRoomsTextArea(){
         ArrayList<String> rooms = RoomQueries.getAllRooms();
         
          listOfRoomsTextArea.setText("");
         for(int i=0;i<rooms.size();i++){  
             listOfRoomsTextArea.setText(listOfRoomsTextArea.getText() + "Room: " +  rooms.get(i) + "\n");
         }
 }
public void rebuildFacultyComboBoxes()
    {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(FacultyQueries.getFacultyList().toArray()));        
        displayFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(FacultyQueries.getFacultyList().toArray()));        
    }
  public void rebuildDatesComboBoxes()
    {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(DatesQueries.getDatesList().toArray()));        
    }
   public void rebuildReseravtionsDatesComboBoxes()
    {
        displayReservationsCombobox.setModel(new javax.swing.DefaultComboBoxModel(DatesQueries.getDatesList().toArray()));     
     }
   private void displayFacultyReservaitons(){
        // Update the reservations label tab.
        String faculty = String.valueOf(displayFacultyComboBox.getSelectedItem());
        ArrayList< ArrayList<String>> takenRooms = ReservationQueries.getReservationsByFaculty(faculty);
        
        DisplayFacultyTextArea.setText("Reserved: \n");
        for(int i=0;i<takenRooms.get(0).size();i++){ 
            DisplayFacultyTextArea.setText(DisplayFacultyTextArea.getText()
                    + "Faculty: " + takenRooms.get(0).get(i) 
                    + " has reserved room: " + takenRooms.get(1).get(i)
                    + "\n" );
            
        } 
        
        ArrayList< ArrayList<String>> waitlistedRooms = WaitlistQueries.getWaitlistByFaculty(faculty);
        DisplayFacultyTextArea.setText(DisplayFacultyTextArea.getText() + "Wailtlist: \n");
        
        // Updatest the waitlist 
        for(int i=0;i<waitlistedRooms.get(0).size();i++){  
            DisplayFacultyTextArea.setText(DisplayFacultyTextArea.getText()
                    + "Faculty: " + waitlistedRooms.get(0).get(i) 
                    + " is waitlisted for date: " + waitlistedRooms.get(1).get(i) 
                    + " with seats: " + waitlistedRooms.get(2).get(i));
            
        }   
        
        //Specal case for when the waitlist is empty
        if (takenRooms.get(0).isEmpty() && waitlistedRooms.get(0).isEmpty()){
            DisplayFacultyTextArea.setText("Empty");
        }
        
        facultyStatusLabel.setText("Showing the reservations for faculty: " + faculty);
   }
   public void displayReseravtions()
    {
        // Update the reservations label tab.
        
        // If the date table is empty, exception for the beginning of the program.
        try {
            Date date = Date.valueOf(String.valueOf(displayReservationsCombobox.getSelectedItem()));
            ArrayList< ArrayList<String>> takenRooms = ReservationQueries.getReservationsByDate(date);
             for(int i=0;i<takenRooms.get(1).size();i++){  
            if (i==0) {
                ReservationsLabel.setText("Faculty: " + takenRooms.get(0).get(i) 
                        + " has reserved room: " + takenRooms.get(1).get(i));
            }
            else{
                ReservationsLabel.setText(ReservationsLabel.getText() + "\n" 
                        + "Faculty: " + takenRooms.get(0).get(i) 
                        + " has reserved room: " + takenRooms.get(1).get(i));
            }
        }  
        
        //Specal case for when the Reservations  is empty
        //System.out.println(takenRooms.get(1).isEmpty());
        if (takenRooms.get(1).isEmpty()){
            ReservationsLabel.setText("EMPTY");
        }
        
        facultyStatusLabel.setText("Showing the reservations for date: " + date);
        }
        catch(Exception e) {
            System.out.println(e);
             facultyStatusLabel.setText("Cannot show reservations, for there are no dates.");
            
        }
     }
   public void displayWaitlist()
    {
        // Update the reservations label tab.
        ArrayList< ArrayList<String>> takenRooms = WaitlistQueries.getWaitlist();
        
        // Updatest the waitlist 
        for(int i=0;i<takenRooms.get(1).size();i++){  
            if (i==0) {
                waitlistTextArea.setText("Faculty: " + takenRooms.get(0).get(i) 
                        + " is waitlisted for date: " + takenRooms.get(1).get(i) 
                        + " with seats: " + takenRooms.get(2).get(i));
            }
            else{
                waitlistTextArea.setText(waitlistTextArea.getText() + "\n" 
                        + "Faculty: " + takenRooms.get(0).get(i) 
                        + " is waitlisted for date: " + takenRooms.get(1).get(i) 
                        + " with seats: " + takenRooms.get(2).get(i));
            }
        }   
        
        //Specal case for when the waitlist is empty
        if (takenRooms.get(1).isEmpty()){
            waitlistTextArea.setText("Empty");
        }
        
        //System.out.print("Array size: " + takenRooms.get(1).size());
        //facultyStatusLabel.setText("Tables Recalculated");
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner AddDateYearSpinner;
    private javax.swing.JButton CancelReservation;
    private javax.swing.JTextArea DisplayFacultyTextArea;
    private javax.swing.JTabbedPane DisplayWaitlist;
    private javax.swing.JTextArea ReservationsLabel;
    private javax.swing.JComboBox addDateDayComboBox;
    private javax.swing.JComboBox addDateMonthComboBox;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JTextField addFacultyNameText;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomName;
    private javax.swing.JTextField addRoomSeats;
    private javax.swing.JComboBox displayFacultyComboBox;
    private javax.swing.JComboBox displayReservationsCombobox;
    private javax.swing.JLabel facultyStatusLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea listOfRoomsTextArea;
    private javax.swing.JButton removeRoomButton;
    private javax.swing.JComboBox reserveDateComboBox;
    private javax.swing.JComboBox reserveFacultyComboBox;
    private javax.swing.JButton reserveRequestButton;
    private javax.swing.JTextField reserveSeatsTestField;
    private javax.swing.JTextArea waitlistTextArea;
    // End of variables declaration//GEN-END:variables
}
